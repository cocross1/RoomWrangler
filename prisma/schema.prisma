// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique // ? means it's optional
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  favoriteIds    String[]      @db.ObjectId // change this to something to do with the IDs of a user's reservations
  accountId      String?       @db.ObjectId
  account        Account?
  reservations   Reservation[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @unique @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(references: [id], fields: [userId])

  @@unique([provider, providerAccountId])
}

model Room {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  number      String
  floor       Int
  imageSrc    String?
  whiteboards Int?
  projector   String?
  chairs      Int?
  buildingId  String  @unique @db.ObjectId

  building     Building      @relation(references: [id], fields: [buildingId], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  roomId    String   @db.ObjectId
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  type      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Building {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  floors Int

  rooms Room[]
}
