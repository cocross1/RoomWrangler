// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// add ability to support different permissions
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String   @unique
  emailVerified  DateTime?
  image          String
  hashedPassword String?
  permissions    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId

  accounts     Account[]
  reservations Reservation[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Room {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  buildingId        String @db.ObjectId
  number            String
  // prisma doesn't support compound 
  buildingAndNumber String @unique
  floor             Int
  imageSrc          String
  whiteboards       Int?
  projectors        Int?
  capacity          Int?
  computers         Int?

  reservations Reservation[]
  building     Building      @relation(fields: [buildingId], references: [id], onDelete: Cascade)
}

model Reservation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  roomId      String   @db.ObjectId
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  type        String
  displayName String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Building {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  buildingName String @unique
  Room         Room[]
}
